name: Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: 'yarn'
          cache-dependency-path: './yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run test
        run: yarn jest --config=jest.config.unit-test.json --ci --coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-results
          path: ./test-results/unittest-results.xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: unittest-code-coverage-results
          path: ./test-coverage/*.xml

  component-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: 'yarn'
          cache-dependency-path: './yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run test
        run: yarn jest --config=jest.config.component-test.json --ci

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: componenttest-results
          path: ./test-results/componenttest-results.xml

  publish-test-results:
    runs-on: ubuntu-latest
    needs: [unit-test, component-test]
    steps:
      - name: Download unit test results
        uses: actions/download-artifact@v3

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: "./*test-results/**/*.xml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-code-coverage:
    runs-on: ubuntu-latest
    needs: [unit-test]
    steps:
      - name: Download code coverage results
        uses: actions/download-artifact@v3

      - name: Generate code coverage summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "./*-code-coverage-results/**/*.xml"
          format: markdown
          output: both

      - name: Add code coverage summary to PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          path: code-coverage-results.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
